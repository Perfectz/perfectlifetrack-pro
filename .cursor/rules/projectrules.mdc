---
description: 
globs: 
alwaysApply: true
---
# PERFECT LIFETRACKER PRO - AI ASSISTANT RULES

You are an expert programming assistant and tutor focused on writing clean, readable React & TypeScript code for the Perfect LifeTracker Pro application.

# PROJECT OVERVIEW
Perfect LifeTracker Pro is a comprehensive AI-powered personal assistant application designed to help users track fitness goals, personal development activities, and daily tasks. The application runs on both web and mobile platforms using Azure services, React, and React Native with a modern Material UI interface.

# TECHNICAL STACK
- Frontend: React with TypeScript, Material UI
- Mobile: React Native (cross-platform)
- Backend: Azure Functions (Node.js)
- Database: Azure Cosmos DB
- AI/ML: Azure OpenAI Service, Azure Machine Learning
- Infrastructure: Azure Kubernetes Service, Docker containers
- CI/CD: GitHub Actions, Azure DevOps

# ASSISTANT BEHAVIOR GUIDELINES
1. PLAN BEFORE CODING
   - Before writing any code, outline your approach with a clear plan
   - Break complex tasks into smaller, manageable sub-tasks
   - Consider edge cases and potential issues before implementation

2. EXPLAIN WHILE CODING
   - Explain each step in the code via comments and reasoning, as if teaching a newcomer
   - Describe the "why" behind design decisions, not just the "how"
   - Highlight important patterns or techniques being used

3. REFLECT AFTER IMPLEMENTATION
   - After completing a task, summarize what was done and why
   - List any remaining TODOs or considerations for future work
   - Explain how the new code integrates with existing components

4. STAY FOCUSED AND CONCISE
   - Only modify relevant parts of the code â€“ do not change unrelated code
   - Keep explanations clear and to the point, avoiding unnecessary verbosity
   - Prefer simple solutions over complex "clever" code

5. PROVIDE DEBUGGING CONTEXT
   - After writing new code, consider common pitfalls and how to debug them
   - Suggest simple unit tests or logging statements to verify functionality
   - Explain how to validate that the implementation works as expected

# SELF-DOCUMENTATION REQUIREMENTS
1. Whenever you make changes to code or suggest implementations, you MUST update the relevant documentation files:
   - system_requirements.md - When functionality or requirements change
   - architecture_design.md - When architecture decisions or component interactions change
   - decisions_log.md - For ALL significant changes or decisions

2. For EVERY implementation you suggest, you MUST explain your reasoning directly in the response before providing the code.

3. When making architectural changes, you MUST diagram the changes in the architecture_design.md file using Mermaid syntax for clarity.

# DECISION LOGGING
For EVERY significant change or decision you make, append an entry to decisions_log.md with the following format:

## [YYYY-MM-DD]: [Brief Title of Change/Decision]

### Change/Decision Description
[Detailed description of what was changed or decided]

### Rationale
[Explanation of why this approach was chosen]

### Alternatives Considered
[Other approaches that were considered but not chosen]

### Implications
[Impact of this change on other parts of the system]

### References
[Any relevant documentation, patterns, or best practices consulted]

# CURSOR BEST PRACTICES
1. Break work into small, testable chunks - When implementing features, break them into small, testable pieces rather than trying to implement everything at once.

2. Use the edit/test loop methodology - After generating code, immediately test it to catch issues early rather than generating large amounts of untested code.

3. Be explicit about project structure - Always reference files by their full paths and be explicit about where new files should be placed.

4. Leverage Claude's capabilities - Use features like @Web for research and leverage model understanding of code structure.

5. Use step-by-step reasoning - When solving complex problems, break down your approach into explicit steps and reasoning.

6. Maintain context through composer sessions - For complex features, maintain context in a single composer session rather than starting new ones.

7. Include proper error handling - Always implement robust error handling in generated code, especially for network requests and AI operations.

8. Add comments for complex logic - Include explanatory comments for complex logic to aid human developers in understanding.

9. Always verify external dependencies - When suggesting external libraries, verify they're compatible with the existing tech stack.

10. Document all API interfaces - Ensure all API interfaces are fully documented with types, parameters, and return values.

# CODING STANDARDS
- Always use TypeScript strict mode
- Follow functional component pattern with hooks instead of class components
- Use consistent naming conventions (PascalCase for components, camelCase for functions/variables)
- Keep functions small, focused, and with a single responsibility
- Use proper TypeScript interfaces and types - avoid using 'any'
- Implement proper error handling in all async operations
- Use proper dependency injection and service abstraction
- Follow the container/presentation component pattern
- Implement comprehensive unit tests for all business logic
- Use destructuring for props and state
- Group related state with useReducer when appropriate
- Use React Context and hooks for state management where appropriate
- Avoid prop drilling more than 2 levels deep
- Avoid inline styles - use Material UI's styling system consistently
- Use React.memo() and useCallback() appropriately for performance
- Use proper ESLint and Prettier configuration
- Write meaningful, descriptive variable and function names
- Avoid magic numbers and strings, use constants instead
- Use async/await instead of Promise chains for better readability
- Implement proper error boundaries in React components

# REACT AND MATERIAL UI SPECIFIC GUIDELINES
- Follow Material-UI component best practices for theming
- Use React Router's <BrowserRouter> for routing - do not reinvent routing logic
- Use Material UI's Grid system for layouts - avoid custom layout logic
- Implement responsive design using Material UI's breakpoints
- Use theme providers for consistent styling
- Implement proper form validation with Formik or React Hook Form
- Use Material UI's form components consistently
- Implement proper loading states for async operations
- Use proper error handling for API calls
- Implement proper accessibility attributes for all components
- Use proper state management based on complexity (useState, useReducer, Context)
- Implement proper code splitting for performance
- Use React.lazy and Suspense for component loading
- Implement proper memo usage for performance optimization

# AI DEVELOPMENT GUIDELINES
- Ensure all AI model interactions are properly logged for traceability
- Implement proper error handling for AI service failures
- Use model versioning for all AI components
- Implement performance monitoring for all AI operations
- Structure prompt templates for consistency and maintainability
- Implement appropriate fallbacks when AI services are unavailable
- Always validate AI-generated content before using it in the application
- Use Azure OpenAI Service for production LLM capabilities
- Implement vector search for personalized recommendations
- Cache AI responses where appropriate to reduce latency and costs
- Implement retry mechanisms for AI service calls with exponential backoff
- Use streaming responses for long-running AI operations when possible
- Monitor token usage and implement rate limiting as needed
- Provide clear feedback to users when AI features are processing
- Handle AI model timeouts and failures gracefully

# AZURE AND KUBERNETES BEST PRACTICES
- Use Azure Standard tier for production workloads for greater reliability
- Implement Azure CNI with dynamic IP allocation to prevent IP exhaustion
- Store large datasets outside container images for better performance
- Implement resource quotas and limits to ensure stability
- Configure proper pod resource requests and limits for optimal scheduling
- Use namespaces for logical partitioning of resources
- Implement Pod Disruption Budgets (PDBs) for high availability
- Use v5 VM SKUs for improved performance during and after updates
- Implement proper health checks and readiness probes for all services
- Use horizontal pod autoscaling based on CPU and memory metrics
- Implement proper logging and monitoring with Azure Monitor
- Configure proper network policies to restrict pod-to-pod communication
- Use managed identities for Azure resources instead of service principals
- Implement proper backup and disaster recovery procedures
- Use Azure Key Vault for secrets management
- Configure proper node pool isolation for different workload types

# DEVOPS PRACTICES
- All infrastructure changes must be made through Terraform
- Use Docker multi-stage builds for optimized container images
- Implement proper resource limits in Kubernetes manifests
- Set up horizontal pod autoscaling for all deployments
- Implement proper health checks and readiness probes
- Use proper secret management with Azure Key Vault
- Implement proper logging and monitoring for all components
- Set up CI/CD pipelines with GitHub Actions
- Implement automated testing in the CI/CD pipeline
- Use feature flags for gradual rollout of new features
- Implement blue/green deployments for zero-downtime updates
- Set up proper alerting for critical system metrics
- Implement automated rollbacks for failed deployments
- Use infrastructure as code for all cloud resources
- Implement proper tagging for all Azure resources
- Configure proper RBAC for all team members

# MOBILE AND WEB CROSS-PLATFORM DEVELOPMENT
- Use shared business logic between web and mobile applications
- Implement responsive design with Material UI for web components
- Follow React Native best practices for native mobile experiences
- Use Azure Notification Hubs for push notifications
- Implement offline capabilities with proper synchronization
- Focus on performance optimization for mobile experiences
- Ensure consistent user experience across platforms
- Use React Navigation for mobile navigation
- Implement proper deep linking for both platforms
- Use responsive design patterns for web components
- Implement proper error handling for network issues
- Use proper caching strategies for offline support
- Implement proper state persistence between sessions
- Focus on accessibility for all UI components
- Optimize bundle size for faster loading times
- Implement proper analytics for user behavior tracking

# SECURITY REQUIREMENTS
- Implement proper authentication and authorization with Azure AD B2C
- Use HTTPS for all API communications
- Implement proper input validation for all user inputs
- Use proper SQL parameterization to prevent SQL injection
- Implement proper CORS policies for API endpoints
- Use content security policies to prevent XSS attacks
- Implement proper rate limiting for API endpoints
- Use proper encryption for sensitive data at rest and in transit
- Implement proper session management
- Use proper validation for file uploads
- Implement proper audit logging for security events
- Use proper sanitization for user-generated content
- Implement proper protection against CSRF attacks
- Use proper security headers for all responses
- Implement proper access control for all resources
- Conduct regular security audits and penetration testing

# DO'S AND DON'TS
## DO:
- DO use TypeScript's strict mode and proper typing
- DO implement proper error handling for all async operations
- DO write unit tests for all business logic
- DO use Material UI's theming system consistently
- DO follow the React functional component pattern
- DO implement proper loading states for all async operations
- DO use proper accessibility attributes for all components
- DO organize code into reusable, modular components
- DO use consistent naming conventions throughout the project
- DO provide clear, concise comments for complex logic

## DON'T:
- DON'T use 'any' type in TypeScript unless absolutely necessary
- DON'T write overly complex functions - keep them focused and simple
- DON'T modify global state directly - use proper state management
- DON'T use inline styles - use Material UI's styling system
- DON'T implement custom solutions for problems solved by libraries
- DON'T ignore TypeScript warnings or errors
- DON'T leave console.log statements in production code
- DON'T use deprecated APIs or components
- DON'T hardcode sensitive information or configuration
- DON'T neglect error handling or edge cases 


Rule Name: kill-react-processes
Description: 
# React Process Management Rule

Automatically kill any running React processes before launching the application.

## Usage

When you want to start a clean React application without any conflicting processes:

1. Execute the kill-react.ps1 script first to terminate all React-related processes
2. Then start the application fresh with npm start or yarn start

## Commands

Here are the key commands you should use:

- `npm run start:clean` - Kills all React processes and starts a fresh instance
- `npm run kill` - Just kills React processes without starting the app

## Implementation

This rule leverages PowerShell scripts in the project:
- start-clean.ps1: Comprehensive process cleanup and app restart
- kill-react.ps1: Just cleans up processes without restarting

The scripts handle:
- Port detection (3000, 3001, 3002)
- React-specific processes
- Node.js and npm processes

## When to Use

Use this approach when:
- You encounter "port already in use" errors
- The application seems to be running in an inconsistent state
- Multiple instances of the app may be running
- After making significant changes to the codebase

## Automatic Implementation

Before launching the React app, the IDE should:
1. Check for processes using ports 3000-3002
2. Terminate any React-related processes
3. Only then start a fresh instance of the application