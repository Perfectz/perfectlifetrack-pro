# Single Container Approach: Build and Serve in one image
FROM node:20-bullseye

# Install necessary packages for serving
RUN apt-get update && apt-get install -y \
    nginx \
    wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Environment variables
ENV NODE_ENV=production
ENV PORT=80
# Explicitly disable native module usage for rollup
ENV ROLLUP_NATIVE_MODULES=false
ENV ROLLUP_SKIP_NODEJS_NATIVE=true
ENV NPM_CONFIG_OPTIONAL=false

# Create app directory
WORKDIR /app

# Copy package.json and install dependencies
COPY package*.json ./

# Clean up any existing node_modules and lock file to avoid npm/rollup native bug
RUN rm -rf node_modules package-lock.json

# Install dependencies without optional dependencies that might cause platform issues
RUN npm install --legacy-peer-deps --omit=optional --force

# Copy the rest of the application
COPY . .

# Use SimpleIndex.tsx instead of index.tsx since there might be an issue with index.tsx
RUN cp -f src/SimpleIndex.tsx src/index.tsx

# Create nginx config for production
RUN mkdir -p /var/www/html && \
    chown -R www-data:www-data /var/www/html && \
    echo 'user www-data; \n\
worker_processes auto; \n\
pid /run/nginx.pid; \n\
error_log /var/log/nginx/error.log; \n\
events { \n\
    worker_connections 1024; \n\
} \n\
http { \n\
    include /etc/nginx/mime.types; \n\
    default_type application/octet-stream; \n\
    access_log /var/log/nginx/access.log; \n\
    server { \n\
        listen 80; \n\
        server_name localhost; \n\
        root /app/dist; \n\
        index index.html; \n\
        location / { \n\
            try_files $uri $uri/ /index.html; \n\
        } \n\
        location ~* \\.(?:jpg|jpeg|gif|png|ico|svg|woff|woff2|ttf|css|js)$ { \n\
            expires 30d; \n\
            add_header Cache-Control "public, max-age=2592000"; \n\
        } \n\
    } \n\
}' > /etc/nginx/nginx.conf

# Create a custom Vite config to avoid rollup native dependencies
RUN echo 'import { defineConfig } from "vite"; \n\
import react from "@vitejs/plugin-react"; \n\
export default defineConfig({ \n\
  plugins: [react()], \n\
  build: { \n\
    target: "es2015", \n\
    minify: "terser", \n\
    rollupOptions: { \n\
      external: ["@rollup/rollup-linux-x64-gnu"] \n\
    } \n\
  }, \n\
  optimizeDeps: { disabled: false }, \n\
  define: { \n\
    "process.env": {}, \n\
    "import.meta.env.MODE": JSON.stringify(process.env.NODE_ENV), \n\
    "import.meta.env.VITE_REACT_APP_AZURE_CLIENT_ID": JSON.stringify(process.env.VITE_REACT_APP_AZURE_CLIENT_ID), \n\
    "import.meta.env.VITE_REACT_APP_AZURE_AUTHORITY": JSON.stringify(process.env.VITE_REACT_APP_AZURE_AUTHORITY), \n\
    "import.meta.env.VITE_REACT_APP_AZURE_REDIRECT_URI": JSON.stringify(process.env.VITE_REACT_APP_AZURE_REDIRECT_URI), \n\
    "import.meta.env.VITE_AUTH0_DOMAIN": JSON.stringify(process.env.VITE_AUTH0_DOMAIN), \n\
    "import.meta.env.VITE_AUTH0_CLIENT_ID": JSON.stringify(process.env.VITE_AUTH0_CLIENT_ID), \n\
    "import.meta.env.VITE_API_URL": JSON.stringify(process.env.VITE_API_URL) \n\
  } \n\
});' > /app/vite.config.custom.js

# Create a custom Vite config for development
RUN echo 'import { defineConfig } from "vite"; \n\
import react from "@vitejs/plugin-react"; \n\
export default defineConfig({ \n\
  plugins: [react()], \n\
  server: { host: "0.0.0.0", port: 3000, open: false }, \n\
  optimizeDeps: { disabled: false }, \n\
  define: { \n\
    "process.env": {}, \n\
    "import.meta.env.MODE": JSON.stringify(process.env.NODE_ENV), \n\
    "import.meta.env.VITE_REACT_APP_AZURE_CLIENT_ID": JSON.stringify(process.env.VITE_REACT_APP_AZURE_CLIENT_ID), \n\
    "import.meta.env.VITE_REACT_APP_AZURE_AUTHORITY": JSON.stringify(process.env.VITE_REACT_APP_AZURE_AUTHORITY), \n\
    "import.meta.env.VITE_REACT_APP_AZURE_REDIRECT_URI": JSON.stringify(process.env.VITE_REACT_APP_AZURE_REDIRECT_URI), \n\
    "import.meta.env.VITE_AUTH0_DOMAIN": JSON.stringify(process.env.VITE_AUTH0_DOMAIN), \n\
    "import.meta.env.VITE_AUTH0_CLIENT_ID": JSON.stringify(process.env.VITE_AUTH0_CLIENT_ID), \n\
    "import.meta.env.VITE_API_URL": JSON.stringify(process.env.VITE_API_URL) \n\
  } \n\
});' > /app/vite.config.dev.js

# Build the application using the skip-native config
RUN ROLLUP_SKIP_NODEJS_NATIVE=true ROLLUP_NATIVE_MODULES=false NODE_OPTIONS="--max-old-space-size=4096" npm install --no-optional --force && \
    ROLLUP_SKIP_NODEJS_NATIVE=true ROLLUP_NATIVE_MODULES=false NODE_OPTIONS="--max-old-space-size=4096" npx vite build --config vite.config.skip-native.js --debug 2>&1 || \
    (echo "Build failed with error code $?. Check logs for details" && mkdir -p /app/dist && echo "<html><body><h1>Build Failed</h1><p>Check logs for details</p></body></html>" > /app/dist/index.html)

# Make sure the dist directory exists
RUN ls -la /app/dist || (mkdir -p /app/dist && echo "<html><body><h1>Build Failed</h1><p>Check logs for details</p></body></html>" > /app/dist/index.html)
RUN chmod -R 755 /app/dist

# Create the entrypoint script
RUN echo '#!/bin/bash \n\
set -e \n\
\n\
# Start nginx or development server based on NODE_ENV \n\
if [ "$NODE_ENV" = "production" ]; then \n\
    echo "Starting in production mode with nginx..." \n\
    nginx -g "daemon off;" \n\
else \n\
    echo "Starting in development mode with Vite..." \n\
    ROLLUP_SKIP_NODEJS_NATIVE=true ROLLUP_NATIVE_MODULES=false npx vite --config vite.config.skip-native.js \n\
fi' > /app/entrypoint.sh

# Make the entrypoint script executable
RUN chmod +x /app/entrypoint.sh

# Expose appropriate ports
EXPOSE 80 3000

# Start the application
CMD ["/app/entrypoint.sh"] 