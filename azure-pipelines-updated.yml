trigger:
  - master

pool:
  name: Default

variables:
  - name: NODE_VERSION
    value: '20.18.1' # Keep specific version for stability
  - name: NODE_PATH
    value: 'C:\Program Files\nodejs'

stages:
  - stage: BuildAndTest
    displayName: 'Build and Test'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and Test All'
        steps:
          # Simplest verification possible - just using batch command directly
          - task: BatchScript@1
            inputs:
              filename: 'verify-node.cmd'
              arguments: '"$(NODE_PATH)"'
              modifyEnvironment: true
            displayName: 'Verify Node.js'
            continueOnError: true

          # Clean Frontend node_modules directory to prevent corruption issues
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Cleaning frontend node_modules directory..."
                if (Test-Path "$(System.DefaultWorkingDirectory)/frontend/node_modules") {
                  try {
                    Remove-Item -Path "$(System.DefaultWorkingDirectory)/frontend/node_modules" -Force -Recurse -ErrorAction Stop
                    Write-Host "Successfully cleaned node_modules directory"
                  }
                  catch {
                    Write-Host "##vso[task.logissue type=warning]Could not remove node_modules directory normally"
                    Write-Host "Attempting force clean with robocopy..."
                    
                    # Create an empty directory to use with robocopy
                    $emptyDir = New-Item -Path "$(System.DefaultWorkingDirectory)/empty" -ItemType Directory -Force
                    
                    # Use robocopy to purge the directory (MIR = mirror empty directory)
                    robocopy $emptyDir.FullName "$(System.DefaultWorkingDirectory)/frontend/node_modules" /MIR /NFL /NDL /NJH /NJS /NC /NS /MT:8
                    
                    # Remove the empty directory
                    Remove-Item -Path $emptyDir.FullName -Force -Recurse
                    
                    Write-Host "Force clean completed"
                  }
                }
                else {
                  Write-Host "node_modules directory doesn't exist, no cleanup needed"
                }
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Clean Frontend node_modules'
          
          # Use NodeTool to ensure consistent Node version
          - task: NodeTool@0
            inputs:
              versionSpec: '$(NODE_VERSION)'
            displayName: 'Install Node.js'

          # Restore npm cache
          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: 'Cache npm packages'

          # Build Frontend with clean install
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo "Building Frontend..."
                cd frontend
                npm clean-install
                npm run build
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Build Frontend'

          # Test Frontend
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo "Testing Frontend..."
                cd frontend
                npm test
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Test Frontend'
          
          # Publish Frontend
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'frontend/build'
              ArtifactName: 'frontend'
              publishLocation: 'Container'
            displayName: 'Publish Frontend Artifacts'

          # Clean Backend node_modules directory
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Cleaning backend node_modules directory..."
                if (Test-Path "$(System.DefaultWorkingDirectory)/backend/node_modules") {
                  try {
                    Remove-Item -Path "$(System.DefaultWorkingDirectory)/backend/node_modules" -Force -Recurse -ErrorAction Stop
                    Write-Host "Successfully cleaned node_modules directory"
                  }
                  catch {
                    Write-Host "##vso[task.logissue type=warning]Could not remove node_modules directory normally"
                    Write-Host "Attempting force clean with robocopy..."
                    
                    # Create an empty directory to use with robocopy
                    $emptyDir = New-Item -Path "$(System.DefaultWorkingDirectory)/empty" -ItemType Directory -Force
                    
                    # Use robocopy to purge the directory
                    robocopy $emptyDir.FullName "$(System.DefaultWorkingDirectory)/backend/node_modules" /MIR /NFL /NDL /NJH /NJS /NC /NS /MT:8
                    
                    # Remove the empty directory
                    Remove-Item -Path $emptyDir.FullName -Force -Recurse
                    
                    Write-Host "Force clean completed"
                  }
                }
                else {
                  Write-Host "node_modules directory doesn't exist, no cleanup needed"
                }
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Clean Backend node_modules'

          # Restore backend npm cache
          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | backend/package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: 'Cache backend npm packages'

          # Build Backend with clean install
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo "Building Backend..."
                cd backend
                npm clean-install
                npm run build
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Build Backend'

          # Test Backend
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo "Testing Backend..."
                cd backend
                npm test
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Test Backend'

          # Publish Backend
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'backend/dist'
              ArtifactName: 'backend'
              publishLocation: 'Container'
            displayName: 'Publish Backend Artifacts'

  # Deployment Stage
  - stage: Deploy
    displayName: 'Deploy'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: 'Deploy Application'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              itemPattern: '**'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Build Artifacts'

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                echo "Deploying application..."
                # Replace with your actual deployment commands
                echo "Artifacts directory: $(System.ArtifactsDirectory)"
                echo "Staging directory: $(Build.ArtifactStagingDirectory)"
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Deploy Application' 