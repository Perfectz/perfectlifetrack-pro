trigger:
  - master

pool:
  name: Default

variables:
  - name: NODE_VERSION
    value: '20.18.1' # Keep specific version for stability
  - name: FRONTEND_NODE_MODULES_PATH
    value: 'frontend/node_modules'
  - name: BACKEND_NODE_MODULES_PATH
    value: 'backend/node_modules'
  - name: NODE_PATH
    value: 'C:\Program Files\nodejs'

stages:
  - stage: BuildAndTest
    displayName: 'Build and Test'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and Test All'
        steps:
          # Use NodeTool@0 but ensure PATH is properly set
          - task: NodeTool@0
            inputs:
              versionSpec: $(NODE_VERSION)
            displayName: 'Install Node.js $(NODE_VERSION)'

          # Cache Frontend node_modules
          - task: Cache@2
            inputs:
              key: 'npm | $(Agent.OS) | frontend/package-lock.json'
              restoreKeys: |
                 npm | $(Agent.OS)
              path: $(FRONTEND_NODE_MODULES_PATH)
            displayName: Cache Frontend node_modules

          # Frontend Build
          - script: |
              cd frontend
              "$(NODE_PATH)\npm.cmd" ci
              "$(NODE_PATH)\npm.cmd" run build
            displayName: 'Build Frontend'

          # Frontend Test
          - script: |
              cd frontend
              "$(NODE_PATH)\npm.cmd" test
            displayName: 'Test Frontend'

          # Publish Frontend Artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'frontend/build'
              ArtifactName: 'frontend'
              publishLocation: 'Container'
            displayName: 'Publish Frontend Artifacts'

          # Cache Backend node_modules
          - task: Cache@2
            inputs:
              key: 'npm | $(Agent.OS) | backend/package-lock.json'
              restoreKeys: |
                 npm | $(Agent.OS)
              path: $(BACKEND_NODE_MODULES_PATH)
            displayName: Cache Backend node_modules

          # Backend Build
          - script: |
              cd backend
              "$(NODE_PATH)\npm.cmd" ci
              "$(NODE_PATH)\npm.cmd" run build
            displayName: 'Build Backend'

          # Backend Test
          - script: |
              cd backend
              "$(NODE_PATH)\npm.cmd" test
            displayName: 'Test Backend'

          # Publish Backend Artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'backend/dist' # Assuming backend build output is in 'dist'
              ArtifactName: 'backend'
              publishLocation: 'Container'
            displayName: 'Publish Backend Artifacts'

  - stage: Deploy
    displayName: 'Deploy'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: 'Deploy Application'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              itemPattern: '**'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Build Artifacts'

          - script: |
              echo "Preparing deployment..."
              echo "Creating deployment directory..."
              if not exist "$(Build.ArtifactStagingDirectory)\deploy" mkdir "$(Build.ArtifactStagingDirectory)\deploy"
            displayName: 'Prepare Deployment'

          - script: |
              echo "Deploying frontend..."
              xcopy "$(System.ArtifactsDirectory)\frontend\*" "$(Build.ArtifactStagingDirectory)\deploy\frontend\" /E /I /Y
              echo "Frontend deployed successfully!"
            displayName: 'Deploy Frontend'

          - script: |
              echo "Deploying backend..."
              xcopy "$(System.ArtifactsDirectory)\backend\*" "$(Build.ArtifactStagingDirectory)\deploy\backend\" /E /I /Y
              echo "Backend deployed successfully!"
            displayName: 'Deploy Backend'

          - script: |
              echo "Deployment verification..."
              echo "Checking deployment files..."
              dir "$(Build.ArtifactStagingDirectory)\deploy" /s
              echo "Deployment complete and verified!"
            displayName: 'Verify Deployment'
