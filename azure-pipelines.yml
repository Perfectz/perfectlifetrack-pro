trigger:
  - master

pool:
  name: Default

variables:
  - name: NODE_VERSION
    value: '20.18.1'

stages:
  - stage: BuildAndTest
    displayName: 'Build and Test'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and Test All'
        steps:
          # Clean workspace before starting
          - script: |
              echo "Cleaning workspace..."
              if exist node_modules rd /s /q node_modules
              if exist frontend\node_modules rd /s /q frontend\node_modules
              if exist backend\node_modules rd /s /q backend\node_modules
            displayName: 'Clean workspace'
            
          # Manual Node.js installation (alternative to NodeTool@0)
          - script: |
              echo "Manually installing Node.js $(NODE_VERSION)..."
              if not exist "$(Agent.ToolsDirectory)\node" mkdir "$(Agent.ToolsDirectory)\node"
              cd "$(Agent.ToolsDirectory)\node"
              
              # Download and extract Node.js for Windows
              curl -o node.zip https://nodejs.org/dist/v$(NODE_VERSION)/node-v$(NODE_VERSION)-win-x64.zip
              tar -xf node.zip
              
              # Add explicit PATH modification
              set NODE_PATH="$(Agent.ToolsDirectory)\node\node-v$(NODE_VERSION)-win-x64"
              echo "##vso[task.prependpath]$(Agent.ToolsDirectory)\node\node-v$(NODE_VERSION)-win-x64"
              
              # Create a backup of npm commands for direct reference if PATH doesn't work
              copy "$(Agent.ToolsDirectory)\node\node-v$(NODE_VERSION)-win-x64\npm.cmd" "$(Build.SourcesDirectory)\npm.cmd" /Y
              copy "$(Agent.ToolsDirectory)\node\node-v$(NODE_VERSION)-win-x64\npm" "$(Build.SourcesDirectory)\npm" /Y
              
              # Verify installation
              "$(Agent.ToolsDirectory)\node\node-v$(NODE_VERSION)-win-x64\node.exe" -v
              "$(Agent.ToolsDirectory)\node\node-v$(NODE_VERSION)-win-x64\npm.cmd" -v
              
              # Export variables for later steps
              echo "##vso[task.setvariable variable=NODE_EXE]$(Agent.ToolsDirectory)\node\node-v$(NODE_VERSION)-win-x64\node.exe"
              echo "##vso[task.setvariable variable=NPM_CMD]$(Agent.ToolsDirectory)\node\node-v$(NODE_VERSION)-win-x64\npm.cmd"
            displayName: 'Install Node.js manually'

          # Frontend Build
          - script: |
              cd frontend
              echo "Using Node.js at: $(NODE_EXE)"
              echo "Using npm at: $(NPM_CMD)"
              "$(NPM_CMD)" ci
              "$(NPM_CMD)" run build
            displayName: 'Build Frontend'

          # Frontend Test
          - script: |
              cd frontend
              "$(NPM_CMD)" test
            displayName: 'Test Frontend'

          # Publish Frontend Artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'frontend/build'
              ArtifactName: 'frontend'
              publishLocation: 'Container'
            displayName: 'Publish Frontend Artifacts'

          # Backend Build
          - script: |
              cd backend
              "$(NPM_CMD)" ci
              "$(NPM_CMD)" run build
            displayName: 'Build Backend'

          # Backend Test
          - script: |
              cd backend
              "$(NPM_CMD)" test
            displayName: 'Test Backend'

          # Publish Backend Artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'backend/dist'
              ArtifactName: 'backend'
              publishLocation: 'Container'
            displayName: 'Publish Backend Artifacts'

  - stage: Deploy
    displayName: 'Deploy'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: 'Deploy Application'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              itemPattern: '**'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Build Artifacts'
          
          - script: |
              echo "Preparing deployment..."
              echo "Creating deployment directory..."
              if not exist "$(Build.ArtifactStagingDirectory)\deploy" mkdir "$(Build.ArtifactStagingDirectory)\deploy"
            displayName: 'Prepare Deployment'
          
          - script: |
              echo "Deploying frontend..."
              xcopy "$(System.ArtifactsDirectory)\frontend\*" "$(Build.ArtifactStagingDirectory)\deploy\frontend\" /E /I /Y
              echo "Frontend deployed successfully!"
            displayName: 'Deploy Frontend'
          
          - script: |
              echo "Deploying backend..."
              xcopy "$(System.ArtifactsDirectory)\backend\*" "$(Build.ArtifactStagingDirectory)\deploy\backend\" /E /I /Y
              echo "Backend deployed successfully!"
            displayName: 'Deploy Backend'
          
          - script: |
              echo "Deployment verification..."
              echo "Checking deployment files..."
              dir "$(Build.ArtifactStagingDirectory)\deploy" /s
              echo "Deployment complete and verified!"
            displayName: 'Verify Deployment'
