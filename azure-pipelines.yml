trigger:
  - master

pool:
  name: Default

variables:
  - name: NODE_VERSION
    value: '20.18.1' # Keep specific version for stability
  - name: NODE_PATH
    value: 'C:\Program Files\nodejs'

stages:
  - stage: BuildAndTest
    displayName: 'Build and Test'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and Test All'
        steps:
          # Simplest verification possible - just using batch command directly
          - task: BatchScript@1
            inputs:
              filename: 'verify-node.cmd'
              arguments: '"$(NODE_PATH)"'
              modifyEnvironment: true
            displayName: 'Verify Node.js'
            continueOnError: true

          # Clean Frontend node_modules directory to prevent corruption issues
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Cleaning frontend node_modules directory..."
                if (Test-Path "$(System.DefaultWorkingDirectory)/frontend/node_modules") {
                  try {
                    Remove-Item -Path "$(System.DefaultWorkingDirectory)/frontend/node_modules" -Force -Recurse -ErrorAction Stop
                    Write-Host "Successfully cleaned node_modules directory"
                  }
                  catch {
                    Write-Host "##vso[task.logissue type=warning]Could not remove node_modules directory normally"
                    Write-Host "Attempting force clean with robocopy..."
                    
                    # Create an empty directory to use with robocopy
                    $emptyDir = New-Item -Path "$(System.DefaultWorkingDirectory)/empty" -ItemType Directory -Force
                    
                    # Use robocopy to purge the directory (MIR = mirror empty directory)
                    robocopy $emptyDir.FullName "$(System.DefaultWorkingDirectory)/frontend/node_modules" /MIR /NFL /NDL /NJH /NJS /NC /NS /MT:8
                    
                    # Remove the empty directory
                    Remove-Item -Path $emptyDir.FullName -Force -Recurse
                    
                    Write-Host "Force clean completed"
                  }
                }
                else {
                  Write-Host "node_modules directory doesn't exist, no cleanup needed"
                }
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Clean Frontend node_modules'

          # Build Frontend - Direct batch file
          - task: BatchScript@1
            inputs:
              filename: 'build-frontend.cmd'
              arguments: '"$(NODE_PATH)"'
              workingFolder: '$(System.DefaultWorkingDirectory)'
            displayName: 'Build Frontend'

          # Test Frontend - Direct batch file
          - task: BatchScript@1
            inputs:
              filename: 'test-frontend.cmd'
              arguments: '"$(NODE_PATH)"'
              workingFolder: '$(System.DefaultWorkingDirectory)'
            displayName: 'Test Frontend'
          
          # Publish Frontend - Custom batch script instead of task
          - task: BatchScript@1
            inputs:
              filename: 'publish-artifacts.cmd'
              arguments: 'frontend\build frontend "$(Build.ArtifactStagingDirectory)\frontend"'
              workingFolder: '$(System.DefaultWorkingDirectory)'
            displayName: 'Publish Frontend Artifacts'

          # Clean Backend node_modules directory
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Cleaning backend node_modules directory..."
                if (Test-Path "$(System.DefaultWorkingDirectory)/backend/node_modules") {
                  try {
                    Remove-Item -Path "$(System.DefaultWorkingDirectory)/backend/node_modules" -Force -Recurse -ErrorAction Stop
                    Write-Host "Successfully cleaned node_modules directory"
                  }
                  catch {
                    Write-Host "##vso[task.logissue type=warning]Could not remove node_modules directory normally"
                    Write-Host "Attempting force clean with robocopy..."
                    
                    # Create an empty directory to use with robocopy
                    $emptyDir = New-Item -Path "$(System.DefaultWorkingDirectory)/empty" -ItemType Directory -Force
                    
                    # Use robocopy to purge the directory (MIR = mirror empty directory)
                    robocopy $emptyDir.FullName "$(System.DefaultWorkingDirectory)/backend/node_modules" /MIR /NFL /NDL /NJH /NJS /NC /NS /MT:8
                    
                    # Remove the empty directory
                    Remove-Item -Path $emptyDir.FullName -Force -Recurse
                    
                    Write-Host "Force clean completed"
                  }
                }
                else {
                  Write-Host "node_modules directory doesn't exist, no cleanup needed"
                }
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Clean Backend node_modules'

          # Build Backend - Direct batch file
          - task: BatchScript@1
            inputs:
              filename: 'build-backend.cmd'
              arguments: '"$(NODE_PATH)"'
              workingFolder: '$(System.DefaultWorkingDirectory)'
            displayName: 'Build Backend'

          # Test Backend - Direct batch file
          - task: BatchScript@1
            inputs:
              filename: 'test-backend.cmd'
              arguments: '"$(NODE_PATH)"'
              workingFolder: '$(System.DefaultWorkingDirectory)'
            displayName: 'Test Backend'

          # Publish Backend - Custom batch script instead of task
          - task: BatchScript@1
            inputs:
              filename: 'publish-artifacts.cmd'
              arguments: 'backend\dist backend "$(Build.ArtifactStagingDirectory)\backend"'
              workingFolder: '$(System.DefaultWorkingDirectory)'
            displayName: 'Publish Backend Artifacts'

  # Deployment Stage using direct batch files
  - stage: Deploy
    displayName: 'Deploy'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: 'Deploy Application'
        steps:
          # Deploy using custom script
          - task: BatchScript@1
            inputs:
              filename: 'deploy.cmd'
              arguments: '"$(System.ArtifactsDirectory)" "$(Build.ArtifactStagingDirectory)"'
              workingFolder: '$(System.DefaultWorkingDirectory)'
            displayName: 'Deploy Application'
