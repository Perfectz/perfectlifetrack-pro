# Top-level schema for pipeline
# $schema: https://raw.githubusercontent.com/microsoft/azure-pipelines-vscode/master/service-schema.json

trigger:
  branches:
    include:
      - master
      - main
      - develop
  paths:
    include:
      - azure-pipelines-pre-checkout.yml
      - azure-pipelines.yml
      - frontend/**
      - backend/**
      - helm/**

variables:
  # Azure Container Registry
  acrName: 'perfectltpacr'
  acrLoginServer: '$(acrName).azurecr.io'
  containerRegistryServiceConnection: 'ACR'
  
  # Kubernetes/AKS
  aksResourceGroup: 'perfectltp-rg'
  aksClusterName: 'perfectltp-aks'
  
  # Helm 
  helmReleaseName: 'perfectltp'
  helmChartPath: 'helm/perfectltp'
  
  # Branch-specific settings
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    environment: 'production'
    imageTag: '$(Build.BuildId)'
    kubernetesNamespace: 'perfectltp-prod'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    environment: 'staging'
    imageTag: 'dev-$(Build.BuildId)'
    kubernetesNamespace: 'perfectltp-staging'

stages:
- stage: GrantAcrPermissions
  displayName: 'Grant ACR Push Rights to Pipeline SP'
  jobs:
  - job: ACRRoleAssignment
    displayName: 'Ensure SP has AcrPush role'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Assign AcrPush role to service principal'
      inputs:
        azureSubscription: 'AzureSubscription'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Retrieve the DevOps service endpoint for ACR
          spnId=$(az devops service-endpoint show \
                  --project $(System.TeamProject) \
                  --name ACR \
                  --org https://dev.azure.com/$(System.TeamProjectCollection) \
                  --query authorization.parameters.serviceprincipalid -o tsv)
          # Retrieve the ACR resource ID
          acrId=$(az acr show --name $(acrName) --query id -o tsv)
          # Assign AcrPush role if not already assigned
          existing=$(az role assignment list \
                     --assignee $spnId --scope $acrId --role AcrPush -o tsv)
          if [ -z "$existing" ]; then
            az role assignment create --assignee $spnId --role AcrPush --scope $acrId
            echo "üîê Granted AcrPush to SP $spnId on $acrId"
          else
            echo "‚úÖ SP already has AcrPush on $acrId"
          fi

- stage: Build
  displayName: 'Build and Push Images'
  jobs:
  - job: BuildFrontend
    displayName: 'Build Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PowerShell@2
      displayName: 'Build & Push Frontend Image'
      inputs:
        targetType: 'inline'
        script: |
          az acr login --name $(acrName)
          docker build -f frontend/Dockerfile.unified -t $(acrLoginServer)/frontend:$(imageTag) --target prod .
          docker push $(acrLoginServer)/frontend:$(imageTag)

  - job: BuildBackend
    displayName: 'Build Backend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: PowerShell@2
      displayName: 'Build & Push Backend Image'
      inputs:
        targetType: 'inline'
        script: |
          az acr login --name $(acrName)
          docker build -f backend/Dockerfile -t $(acrLoginServer)/backend:$(imageTag) .
          docker push $(acrLoginServer)/backend:$(imageTag)

- stage: Deploy
  displayName: 'Deploy to $(environment)'
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy to Kubernetes'
    environment: $(environment)
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'latest'
          
          - task: AzureCLI@2
            displayName: 'AKS Login'
            inputs:
              azureSubscription: 'AzureSubscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
                
                # Create namespace if it doesn't exist
                kubectl get namespace $(kubernetesNamespace) || kubectl create namespace $(kubernetesNamespace)
                
                # Create secret for ACR pull
                kubectl create secret docker-registry acr-auth \
                  --docker-server=$(acrLoginServer) \
                  --docker-username=$(acrUser) \
                  --docker-password=$(acrPassword) \
                  --namespace=$(kubernetesNamespace) \
                  --dry-run=client -o yaml | kubectl apply -f -
          
          - task: HelmDeploy@0
            displayName: 'Helm upgrade'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'AzureSubscription'
              azureResourceGroup: '$(aksResourceGroup)'
              kubernetesCluster: '$(aksClusterName)'
              namespace: '$(kubernetesNamespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(helmChartPath)'
              releaseName: '$(helmReleaseName)'
              overrideValues: |
                image.tag=$(imageTag)
                image.pullSecrets[0].name=acr-auth
                global.environment=$(environment)
                global.domain=$(domain)
              valueFile: '$(helmChartPath)/values.yaml'
              install: true
              waitForExecution: true
              arguments: '--atomic --timeout 10m0s'
          
          - task: AzureCLI@2
            displayName: 'Verify Deployment'
            inputs:
              azureSubscription: 'AzureSubscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                kubectl get pods -n $(kubernetesNamespace) -l app.kubernetes.io/instance=$(helmReleaseName)
                
                # Check frontend deployment
                frontend_status=$(kubectl rollout status deployment/$(helmReleaseName)-frontend -n $(kubernetesNamespace) --timeout=300s)
                echo $frontend_status
                
                # Check backend deployment
                backend_status=$(kubectl rollout status deployment/$(helmReleaseName)-backend -n $(kubernetesNamespace) --timeout=300s)
                echo $backend_status
                
                # Check ingress
                kubectl get ingress -n $(kubernetesNamespace)

- stage: Test
  displayName: 'Post-Deployment Tests'
  dependsOn: Deploy
  jobs:
  - job: IntegrationTests
    displayName: 'Run Integration Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo "Running integration tests against $(environment)"
      displayName: 'Integration Tests'

  - job: LoadTests
    displayName: 'Run Load Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo "Running load tests against $(environment)"
      displayName: 'Load Tests'
