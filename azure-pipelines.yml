trigger:
  - master

pool:
  name: Default

variables:
  - name: NODE_VERSION
    value: '20.18.1' # Keep specific version for stability
  - name: FRONTEND_NODE_MODULES_PATH
    value: 'frontend/node_modules'
  - name: BACKEND_NODE_MODULES_PATH
    value: 'backend/node_modules'

stages:
  - stage: BuildAndTest
    displayName: 'Build and Test'
    jobs:
      - job: BuildAndTest
        displayName: 'Build and Test All'
        steps:
          # Install Node.js using the standard task
          - task: NodeTool@0
            inputs:
              versionSpec: $(NODE_VERSION)
            displayName: 'Install Node.js $(NODE_VERSION)'

          # Cache Frontend node_modules
          - task: Cache@2
            inputs:
              key: 'npm | $(Agent.OS) | frontend/package-lock.json'
              restoreKeys: |
                 npm | $(Agent.OS)
              path: $(FRONTEND_NODE_MODULES_PATH)
            displayName: Cache Frontend node_modules

          # Frontend Build - Using PowerShell
          - powershell: |
              Set-Location -Path "frontend"
              npm ci
              npm run build
            displayName: 'Build Frontend'
            workingDirectory: $(System.DefaultWorkingDirectory)

          # Frontend Test - Using PowerShell
          - powershell: |
              Set-Location -Path "frontend"
              npm test
            displayName: 'Test Frontend'
            workingDirectory: $(System.DefaultWorkingDirectory)

          # Publish Frontend Artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'frontend/build'
              ArtifactName: 'frontend'
              publishLocation: 'Container'
            displayName: 'Publish Frontend Artifacts'

          # Cache Backend node_modules
          - task: Cache@2
            inputs:
              key: 'npm | $(Agent.OS) | backend/package-lock.json'
              restoreKeys: |
                 npm | $(Agent.OS)
              path: $(BACKEND_NODE_MODULES_PATH)
            displayName: Cache Backend node_modules

          # Backend Build - Using PowerShell
          - powershell: |
              Set-Location -Path "backend"
              npm ci
              npm run build
            displayName: 'Build Backend'
            workingDirectory: $(System.DefaultWorkingDirectory)

          # Backend Test - Using PowerShell
          - powershell: |
              Set-Location -Path "backend"
              npm test
            displayName: 'Test Backend'
            workingDirectory: $(System.DefaultWorkingDirectory)

          # Publish Backend Artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: 'backend/dist' # Assuming backend build output is in 'dist'
              ArtifactName: 'backend'
              publishLocation: 'Container'
            displayName: 'Publish Backend Artifacts'

  - stage: Deploy
    displayName: 'Deploy'
    dependsOn: BuildAndTest
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: 'Deploy Application'
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              itemPattern: '**'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download Build Artifacts'

          - powershell: |
              Write-Host "Preparing deployment..."
              Write-Host "Creating deployment directory..."
              if (!(Test-Path -Path "$(Build.ArtifactStagingDirectory)\deploy")) {
                  New-Item -Path "$(Build.ArtifactStagingDirectory)\deploy" -ItemType Directory -Force
              }
            displayName: 'Prepare Deployment'

          - powershell: |
              Write-Host "Deploying frontend..."
              Copy-Item -Path "$(System.ArtifactsDirectory)\frontend\*" -Destination "$(Build.ArtifactStagingDirectory)\deploy\frontend\" -Recurse -Force
              Write-Host "Frontend deployed successfully!"
            displayName: 'Deploy Frontend'

          - powershell: |
              Write-Host "Deploying backend..."
              Copy-Item -Path "$(System.ArtifactsDirectory)\backend\*" -Destination "$(Build.ArtifactStagingDirectory)\deploy\backend\" -Recurse -Force
              Write-Host "Backend deployed successfully!"
            displayName: 'Deploy Backend'

          - powershell: |
              Write-Host "Deployment verification..."
              Write-Host "Checking deployment files..."
              Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)\deploy" -Recurse
              Write-Host "Deployment complete and verified!"
            displayName: 'Verify Deployment'
