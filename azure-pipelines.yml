trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - frontend/**
      - backend/**
      - helm/**

variables:
  # Azure Container Registry
  acrName: 'perfectltpacr'
  acrLoginServer: '$(acrName).azurecr.io'
  
  # Kubernetes/AKS
  aksResourceGroup: 'perfectltp-rg'
  aksClusterName: 'perfectltp-aks'
  
  # Helm 
  helmReleaseName: 'perfectltp'
  helmChartPath: 'helm/perfectltp'
  
  # Branch-specific settings
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    environment: 'production'
    imageTag: '$(Build.BuildId)'
    kubernetesNamespace: 'perfectltp-prod'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    environment: 'staging'
    imageTag: 'dev-$(Build.BuildId)'
    kubernetesNamespace: 'perfectltp-staging'

stages:
- stage: Build
  displayName: 'Build and Push Images'
  jobs:
  - job: BuildFrontend
    displayName: 'Build Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build frontend image'
      inputs:
        command: 'build'
        containerRegistry: 'ACR'
        repository: 'frontend'
        dockerfile: 'frontend/Dockerfile.unified'
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: |
          $(imageTag)
          latest
    
    - task: Docker@2
      displayName: 'Push frontend image'
      inputs:
        command: 'push'
        containerRegistry: 'ACR'
        repository: 'frontend'
        tags: |
          $(imageTag)
          latest

  - job: BuildBackend
    displayName: 'Build Backend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: 'Build backend image'
      inputs:
        command: 'build'
        containerRegistry: 'ACR'
        repository: 'backend'
        dockerfile: 'backend/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: |
          $(imageTag)
          latest
    
    - task: Docker@2
      displayName: 'Push backend image'
      inputs:
        command: 'push'
        containerRegistry: 'ACR'
        repository: 'backend'
        tags: |
          $(imageTag)
          latest

- stage: Deploy
  displayName: 'Deploy to $(environment)'
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy to Kubernetes'
    environment: $(environment)
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'latest'
          
          - task: AzureCLI@2
            displayName: 'AKS Login'
            inputs:
              azureSubscription: 'AzureSubscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
                
                # Create namespace if it doesn't exist
                kubectl get namespace $(kubernetesNamespace) || kubectl create namespace $(kubernetesNamespace)
                
                # Create secret for ACR pull
                kubectl create secret docker-registry acr-auth \
                  --docker-server=$(acrLoginServer) \
                  --docker-username=$(acrUser) \
                  --docker-password=$(acrPassword) \
                  --namespace=$(kubernetesNamespace) \
                  --dry-run=client -o yaml | kubectl apply -f -
          
          - task: HelmDeploy@0
            displayName: 'Helm upgrade'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'AzureSubscription'
              azureResourceGroup: '$(aksResourceGroup)'
              kubernetesCluster: '$(aksClusterName)'
              namespace: '$(kubernetesNamespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(helmChartPath)'
              releaseName: '$(helmReleaseName)'
              overrideValues: |
                image.tag=$(imageTag)
                image.pullSecrets[0].name=acr-auth
                global.environment=$(environment)
                global.domain=$(domain)
              valueFile: '$(helmChartPath)/values.yaml'
              install: true
              waitForExecution: true
              arguments: '--atomic --timeout 10m0s'
          
          - task: AzureCLI@2
            displayName: 'Verify Deployment'
            inputs:
              azureSubscription: 'AzureSubscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                kubectl get pods -n $(kubernetesNamespace) -l app.kubernetes.io/instance=$(helmReleaseName)
                
                # Check frontend deployment
                frontend_status=$(kubectl rollout status deployment/$(helmReleaseName)-frontend -n $(kubernetesNamespace) --timeout=300s)
                echo $frontend_status
                
                # Check backend deployment
                backend_status=$(kubectl rollout status deployment/$(helmReleaseName)-backend -n $(kubernetesNamespace) --timeout=300s)
                echo $backend_status
                
                # Check ingress
                kubectl get ingress -n $(kubernetesNamespace)

- stage: Test
  displayName: 'Post-Deployment Tests'
  dependsOn: Deploy
  jobs:
  - job: IntegrationTests
    displayName: 'Run Integration Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo "Running integration tests against $(environment)"
      displayName: 'Integration Tests'

  - job: LoadTests
    displayName: 'Run Load Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: echo "Running load tests against $(environment)"
      displayName: 'Load Tests'
